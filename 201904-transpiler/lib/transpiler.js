"use strict";

/*
  DefaultExport:: "export default"
  VariableDeclarator:: "let"
  Identifier:: /[a-zA-Z]+/
  Number:: /[0-9]+/
  VariableAssignmentOperator:: "="
  BinaryOperator:: "+" | "-" | "*"
  LineBreak:: "\n"
*/
// interface Parser {
//
// }
// Parsing 1: Lexical Analysis
var tokenizer = function tokenizer(code) {
  return ""; // an array  tokens in processed order
}; // Parsing 2: Syntatic Analysis


var parser = function parser(tokens) {
  /* ... */
  return {}; // an object which is our AST - we can actually refer back to the tree traversal stuff we did
};

var transformer = function transformer(AST) {
  /* ... */
  return {}; // a modified AST
};

var generator = function generator(AST) {
  /* ... */
  return ""; // a string that is code
};

var generate = function generate(code) {
  var tokens = tokenizer(code);
  var AST = parser(tokens);
  var transformedAST = transformer(AST);
  var newCode = generator(transformedAST);
  return newCode;
};

module.exports = generate;
module.exports.tokenizer = tokenizer;
module.exports.parser = parser;
module.exports.transformer = transformer;
module.exports.generator = generator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90cmFuc3BpbGVyLnRzIl0sIm5hbWVzIjpbInRva2VuaXplciIsImNvZGUiLCJwYXJzZXIiLCJ0b2tlbnMiLCJ0cmFuc2Zvcm1lciIsIkFTVCIsImdlbmVyYXRvciIsImdlbmVyYXRlIiwidHJhbnNmb3JtZWRBU1QiLCJuZXdDb2RlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7O0FBcUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0EsSUFBTUEsU0FBa0MsR0FBRyxTQUFyQ0EsU0FBcUMsQ0FBQUMsSUFBSSxFQUFJO0FBQy9DLFNBQU8sRUFBUCxDQUQrQyxDQUNwQztBQUNkLENBRkQsQyxDQUlBOzs7QUFDQSxJQUFNQyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFDQyxNQUFELEVBQWlCO0FBQzVCO0FBQ0EsU0FBTyxFQUFQLENBRjRCLENBRWpCO0FBQ2QsQ0FIRDs7QUFJQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDQyxHQUFELEVBQWM7QUFDOUI7QUFDQSxTQUFPLEVBQVAsQ0FGOEIsQ0FFbkI7QUFDZCxDQUhEOztBQUtBLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUNELEdBQUQsRUFBYztBQUM1QjtBQUNBLFlBRjRCLENBRWpCO0FBQ2QsQ0FIRDs7QUFLQSxJQUFNRSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFDTixJQUFELEVBQWU7QUFDNUIsTUFBTUUsTUFBTSxHQUFHSCxTQUFTLENBQUNDLElBQUQsQ0FBeEI7QUFDQSxNQUFNSSxHQUFHLEdBQUdILE1BQU0sQ0FBQ0MsTUFBRCxDQUFsQjtBQUNBLE1BQU1LLGNBQWMsR0FBR0osV0FBVyxDQUFDQyxHQUFELENBQWxDO0FBQ0EsTUFBTUksT0FBTyxHQUFHSCxTQUFTLENBQUNFLGNBQUQsQ0FBekI7QUFDQSxTQUFPQyxPQUFQO0FBQ0gsQ0FORDs7QUFRQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSixRQUFqQjtBQUNBRyxNQUFNLENBQUNDLE9BQVAsQ0FBZVgsU0FBZixHQUEyQkEsU0FBM0I7QUFDQVUsTUFBTSxDQUFDQyxPQUFQLENBQWVULE1BQWYsR0FBd0JBLE1BQXhCO0FBQ0FRLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUCxXQUFmLEdBQTZCQSxXQUE3QjtBQUNBTSxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsU0FBZixHQUEyQkEsU0FBM0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBEZWZhdWx0RXhwb3J0OjogXCJleHBvcnQgZGVmYXVsdFwiXG4gIFZhcmlhYmxlRGVjbGFyYXRvcjo6IFwibGV0XCJcbiAgSWRlbnRpZmllcjo6IC9bYS16QS1aXSsvXG4gIE51bWJlcjo6IC9bMC05XSsvXG4gIFZhcmlhYmxlQXNzaWdubWVudE9wZXJhdG9yOjogXCI9XCJcbiAgQmluYXJ5T3BlcmF0b3I6OiBcIitcIiB8IFwiLVwiIHwgXCIqXCJcbiAgTGluZUJyZWFrOjogXCJcXG5cIlxuKi9cblxudHlwZSBEZWZhdWx0RXhwb3J0ID0gJ2V4cG9ydCBkZWZhdWx0JztcbnR5cGUgVmFyaWFibGVEZWNsYXJhdG9yID0gJ2xldCc7XG50eXBlIElkZW50aWZpZXIgPSBzdHJpbmc7XG50eXBlIE51bWJlclRva2VuID0gbnVtYmVyO1xudHlwZSBWYXJpYWJsZUFzc2lnbm1lbnRPcGVyYXRvciA9ICc9JztcbnR5cGUgQmluYXJ5T3BlcmF0b3IgPSAnKycgfCAnLScgfCAnKic7XG50eXBlIExpbmVCcmVhayA9ICdcXG4nO1xuXG50eXBlIFJhd0NvZGUgPSAnc3RyaW5nJztcblxuaW50ZXJmYWNlIFRva2VuIHtcbiAgICBpZDogYW55O1xuICAgIHR5cGU6XG4gICAgfCBEZWZhdWx0RXhwb3J0XG4gICAgfCBWYXJpYWJsZURlY2xhcmF0b3JcbiAgICB8IElkZW50aWZpZXJcbiAgICB8IE51bWJlclRva2VuXG4gICAgfCBWYXJpYWJsZUFzc2lnbm1lbnRPcGVyYXRvclxuICAgIHwgQmluYXJ5T3BlcmF0b3JcbiAgICB8IExpbmVCcmVhaztcbiAgICB2YWx1ZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQVNUIHtcbiAgICBOb2RlOiBbVG9rZW5dO1xufVxuXG4vLyBpbnRlcmZhY2UgUGFyc2VyIHtcbi8vXG4vLyB9XG5cbmludGVyZmFjZSBUcmFuc3BpbGVyIHtcbiAgICBUb2tlbml6ZXI6IChjb2RlOiBzdHJpbmcpID0+IFtUb2tlbl0gfCBzdHJpbmc7XG59XG5cbi8vIFBhcnNpbmcgMTogTGV4aWNhbCBBbmFseXNpc1xuY29uc3QgdG9rZW5pemVyOiBUcmFuc3BpbGVyWydUb2tlbml6ZXInXSA9IGNvZGUgPT4ge1xuICAgIHJldHVybiBcIlwiOyAvLyBhbiBhcnJheSAgdG9rZW5zIGluIHByb2Nlc3NlZCBvcmRlclxufTtcblxuLy8gUGFyc2luZyAyOiBTeW50YXRpYyBBbmFseXNpc1xuY29uc3QgcGFyc2VyID0gKHRva2VuczogYW55KSA9PiB7XG4gICAgLyogLi4uICovXG4gICAgcmV0dXJuIHt9OyAvLyBhbiBvYmplY3Qgd2hpY2ggaXMgb3VyIEFTVCAtIHdlIGNhbiBhY3R1YWxseSByZWZlciBiYWNrIHRvIHRoZSB0cmVlIHRyYXZlcnNhbCBzdHVmZiB3ZSBkaWRcbn07XG5jb25zdCB0cmFuc2Zvcm1lciA9IChBU1Q6IGFueSkgPT4ge1xuICAgIC8qIC4uLiAqL1xuICAgIHJldHVybiB7fTsgLy8gYSBtb2RpZmllZCBBU1Rcbn07XG5cbmNvbnN0IGdlbmVyYXRvciA9IChBU1Q6IGFueSkgPT4ge1xuICAgIC8qIC4uLiAqL1xuICAgIHJldHVybiBgYDsgLy8gYSBzdHJpbmcgdGhhdCBpcyBjb2RlXG59O1xuXG5jb25zdCBnZW5lcmF0ZSA9IChjb2RlOiBhbnkpID0+IHtcbiAgICBjb25zdCB0b2tlbnMgPSB0b2tlbml6ZXIoY29kZSk7XG4gICAgY29uc3QgQVNUID0gcGFyc2VyKHRva2Vucyk7XG4gICAgY29uc3QgdHJhbnNmb3JtZWRBU1QgPSB0cmFuc2Zvcm1lcihBU1QpO1xuICAgIGNvbnN0IG5ld0NvZGUgPSBnZW5lcmF0b3IodHJhbnNmb3JtZWRBU1QpO1xuICAgIHJldHVybiBuZXdDb2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZTtcbm1vZHVsZS5leHBvcnRzLnRva2VuaXplciA9IHRva2VuaXplcjtcbm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHBhcnNlcjtcbm1vZHVsZS5leHBvcnRzLnRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG5tb2R1bGUuZXhwb3J0cy5nZW5lcmF0b3IgPSBnZW5lcmF0b3I7XG4iXX0=